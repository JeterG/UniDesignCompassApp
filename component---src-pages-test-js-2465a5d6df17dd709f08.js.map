{"version":3,"sources":["webpack:///./src/pages/test.js","webpack:///./src/state/actions.js","webpack:///./src/graphql/queries.js","webpack:///./src/graphql/mutations.js","webpack:///./src/graphql_utils/utils.js","webpack:///./src/aws-exports.js","webpack:///./src/components/BarChart.js","webpack:///./src/components/ResponsiveBarChart.js","webpack:///./src/components/LogCard.js","webpack:///./src/components/Graph.js"],"names":["Test","render","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_Graph__WEBPACK_IMPORTED_MODULE_2__","processId","Component","__webpack_require__","d","__webpack_exports__","authenticateUser","updateUser","logOutUser","_constants__WEBPACK_IMPORTED_MODULE_0__","payload","dispatch","type","AUTH_USER","UPDATE_USER","LOGOUT_USER","getUser","listUsers","getProcess","getPhase","createUser","createProcess","createPhase","updatePhase","createLog","updateLog","deleteLog","_x","_getUser","apply","this","arguments","_callee","id","user","regenerator_default","wrap","_context","prev","next","API","graphql","graphqlOperation","queries","sent","abrupt","stop","getUserbyUsername","_x2","_getUserbyUsername","_callee2","username","filter","userinfo","_context2","eq","data","items","_x4","_getProcess","_callee4","process_id","Process","_context4","_x5","_getPhase","_callee5","phase_id","Phase","_context5","_x6","_x7","_x8","_x9","_x10","_x11","_createUser","_callee6","first_name","last_name","email","phone","password_hash","newUser","_context6","phone_number","mutations","input","createLogs","_x12","_x13","_x14","_createLogs","_callee7","PhaseId","timestamp","text","loginfo","newLog","_context7","logPhaseId","_callee8","name","date_start","date_end","processInfo","newProcess","_context8","user_id","processUserId","_callee9","title","description","phaseInfo","newPhase","_context9","duration","phaseProcessId","_x22","_updateUser","_callee10","user_info","updatedUser","_context10","updateLogs","_x23","_x24","_x25","_updateLogs","_callee11","updatedLog","_context11","_x29","_x30","_x31","_x32","_updatePhase","_callee13","updatedPhase","_context13","deleteLogs","_x35","_deleteLogs","_callee16","deletedLog","_context16","createNewCompass","_x37","_x38","_x39","_createNewCompass","_callee18","phases","process_info","i","_context18","then","res","error","console","log","length","Amplify","configure","aws_config","awsmobile","aws_project_region","aws_appsync_graphqlEndpoint","aws_appsync_region","aws_appsync_authenticationType","aws_appsync_apiKey","aws_cognito_identity_pool_id","aws_cognito_region","aws_user_pools_id","aws_user_pools_web_client_id","oauth","aws_content_delivery_bucket","aws_content_delivery_bucket_region","aws_content_delivery_url","BarChart","defaultSize","width","height","defaultSpec","$schema","padding","_this","autosize","contains","resize","signals","value","on","events","update","scales","domain","field","range","round","nice","axes","orient","scale","titleFontSize","encoding","x","y","marks","from","encode","enter","band","y2","fill","hover","align","baseline","signal","offset","spec","props","react_default","esm","sizeMe","ResponsiveBarChart","react_sizeme","_ref","size","components_BarChart","LogCard","_Component","call","edit_toggle_handler","setState","editing","state","update_button_handler","updateHandler","logId","Date","now","editText","delete_button_handler","deleteHandler","textarea_handler","e","target","className","phaseTitle","parseInt","toLocaleString","onClick","style","whiteSpace","rows","autoFocus","defaultValue","onChange","propTypes","PropTypes","object","isRequired","string","number","func","Graph","deleteLogHandler","log_id","loading","Utils","load_log_data","updateLogHandler","process_logs_render","selected_process_phase_logs","reduce","arr","phase","logs","log_ids","map","phase_title","push","sort","b","components_LogCard","key","bar_chart_render","chartData","components_ResponsiveBarChart","loading_render","position","zIndex","top","left","marginTop","marginLeft","load_process_data","load_chart_data","componentDidMount","componentDidUpdate","prevProps","updateComponent","msToHours","t","_this2","phaseids","category","amount","toFixed","table","_this3","phase_ids","Promise","all","phase_logs"],"mappings":"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","file":"component---src-pages-test-js-2465a5d6df17dd709f08.js","sourcesContent":["import React, { Component } from \"react\";\nimport Graph from \"../components/Graph\";\n\nclass Test extends Component {\n    render() {\n        return <Graph processId={'ec468ab1-9ed8-41fe-a88a-3c85cdbc7fc6'} />\n    }\n}\n\nexport default Test;","import { AUTH_USER,LOGOUT_USER,UPDATE_USER } from \"./constants\"\n\nexport const authenticateUser = (payload) => dispatch => {\n  dispatch({\n    type: AUTH_USER,\n    payload\n  })\n}\nexport const updateUser = (payload) => dispatch => {\n  dispatch({\n    type: UPDATE_USER,\n    payload\n  })\n}\nexport const logOutUser = () => dispatch => {\n  dispatch({\n    type: LOGOUT_USER\n  })\n}\n\n","// eslint-disable\n// this is an auto generated file. This will be overwritten\n\nexport const getUser = `query GetUser($id: ID!) {\n  getUser(id: $id) {\n    id\n    username\n    first_name\n    last_name\n    email\n    password_hash\n    phone_number\n    processes {\n      items {\n        id\n        user_id\n        name\n        date_start\n        date_end\n      }\n      nextToken\n    }\n  }\n}\n`;\nexport const listUsers = `query ListUsers(\n  $filter: ModelUserFilterInput\n  $limit: Int\n  $nextToken: String\n) {\n  listUsers(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    items {\n      id\n      username\n      first_name\n      last_name\n      email\n      password_hash\n      phone_number\n      processes {\n        nextToken\n      }\n    }\n    nextToken\n  }\n}\n`;\nexport const getProcess = `query GetProcess($id: ID!) {\n  getProcess(id: $id) {\n    id\n    phaseids {\n      items {\n        id\n        duration\n        title\n        description\n      }\n      nextToken\n    }\n    user_id\n    user {\n      id\n      username\n      first_name\n      last_name\n      email\n      password_hash\n      phone_number\n      processes {\n        nextToken\n      }\n    }\n    name\n    date_start\n    date_end\n  }\n}\n`;\nexport const listProcesss = `query ListProcesss(\n  $filter: ModelProcessFilterInput\n  $limit: Int\n  $nextToken: String\n) {\n  listProcesss(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    items {\n      id\n      phaseids {\n        nextToken\n      }\n      user_id\n      user {\n        id\n        username\n        first_name\n        last_name\n        email\n        password_hash\n        phone_number\n      }\n      name\n      date_start\n      date_end\n    }\n    nextToken\n  }\n}\n`;\nexport const getPhase = `query GetPhase($id: ID!) {\n  getPhase(id: $id) {\n    id\n    logs {\n      items {\n        id\n        timestamp\n        text\n      }\n      nextToken\n    }\n    duration\n    title\n    description\n    process {\n      id\n      phaseids {\n        nextToken\n      }\n      user_id\n      user {\n        id\n        username\n        first_name\n        last_name\n        email\n        password_hash\n        phone_number\n      }\n      name\n      date_start\n      date_end\n    }\n  }\n}\n`;\nexport const listPhases = `query ListPhases(\n  $filter: ModelPhaseFilterInput\n  $limit: Int\n  $nextToken: String\n) {\n  listPhases(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    items {\n      id\n      logs {\n        nextToken\n      }\n      duration\n      title\n      description\n      process {\n        id\n        user_id\n        name\n        date_start\n        date_end\n      }\n    }\n    nextToken\n  }\n}\n`;\nexport const getLog = `query GetLog($id: ID!) {\n  getLog(id: $id) {\n    id\n    timestamp\n    text\n    phase {\n      id\n      logs {\n        nextToken\n      }\n      duration\n      title\n      description\n      process {\n        id\n        user_id\n        name\n        date_start\n        date_end\n      }\n    }\n  }\n}\n`;\nexport const listLogs = `query ListLogs($filter: ModelLogFilterInput, $limit: Int, $nextToken: String) {\n  listLogs(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    items {\n      id\n      timestamp\n      text\n      phase {\n        id\n        duration\n        title\n        description\n      }\n    }\n    nextToken\n  }\n}\n`;\n","// eslint-disable\n// this is an auto generated file. This will be overwritten\n\nexport const createUser = `mutation CreateUser($input: CreateUserInput!) {\n  createUser(input: $input) {\n    id\n    username\n    first_name\n    last_name\n    email\n    password_hash\n    phone_number\n    processes {\n      items {\n        id\n        user_id\n        name\n        date_start\n        date_end\n      }\n      nextToken\n    }\n  }\n}\n`;\nexport const updateUser = `mutation UpdateUser($input: UpdateUserInput!) {\n  updateUser(input: $input) {\n    id\n    username\n    first_name\n    last_name\n    email\n    password_hash\n    phone_number\n    processes {\n      items {\n        id\n        user_id\n        name\n        date_start\n        date_end\n      }\n      nextToken\n    }\n  }\n}\n`;\nexport const deleteUser = `mutation DeleteUser($input: DeleteUserInput!) {\n  deleteUser(input: $input) {\n    id\n    username\n    first_name\n    last_name\n    email\n    password_hash\n    phone_number\n    processes {\n      items {\n        id\n        user_id\n        name\n        date_start\n        date_end\n      }\n      nextToken\n    }\n  }\n}\n`;\nexport const createProcess = `mutation CreateProcess($input: CreateProcessInput!) {\n  createProcess(input: $input) {\n    id\n    phaseids {\n      items {\n        id\n        duration\n        title\n        description\n      }\n      nextToken\n    }\n    user_id\n    user {\n      id\n      username\n      first_name\n      last_name\n      email\n      password_hash\n      phone_number\n      processes {\n        nextToken\n      }\n    }\n    name\n    date_start\n    date_end\n  }\n}\n`;\nexport const updateProcess = `mutation UpdateProcess($input: UpdateProcessInput!) {\n  updateProcess(input: $input) {\n    id\n    phaseids {\n      items {\n        id\n        duration\n        title\n        description\n      }\n      nextToken\n    }\n    user_id\n    user {\n      id\n      username\n      first_name\n      last_name\n      email\n      password_hash\n      phone_number\n      processes {\n        nextToken\n      }\n    }\n    name\n    date_start\n    date_end\n  }\n}\n`;\nexport const deleteProcess = `mutation DeleteProcess($input: DeleteProcessInput!) {\n  deleteProcess(input: $input) {\n    id\n    phaseids {\n      items {\n        id\n        duration\n        title\n        description\n      }\n      nextToken\n    }\n    user_id\n    user {\n      id\n      username\n      first_name\n      last_name\n      email\n      password_hash\n      phone_number\n      processes {\n        nextToken\n      }\n    }\n    name\n    date_start\n    date_end\n  }\n}\n`;\nexport const createPhase = `mutation CreatePhase($input: CreatePhaseInput!) {\n  createPhase(input: $input) {\n    id\n    logs {\n      items {\n        id\n        timestamp\n        text\n      }\n      nextToken\n    }\n    duration\n    title\n    description\n    process {\n      id\n      phaseids {\n        nextToken\n      }\n      user_id\n      user {\n        id\n        username\n        first_name\n        last_name\n        email\n        password_hash\n        phone_number\n      }\n      name\n      date_start\n      date_end\n    }\n  }\n}\n`;\nexport const updatePhase = `mutation UpdatePhase($input: UpdatePhaseInput!) {\n  updatePhase(input: $input) {\n    id\n    logs {\n      items {\n        id\n        timestamp\n        text\n      }\n      nextToken\n    }\n    duration\n    title\n    description\n    process {\n      id\n      phaseids {\n        nextToken\n      }\n      user_id\n      user {\n        id\n        username\n        first_name\n        last_name\n        email\n        password_hash\n        phone_number\n      }\n      name\n      date_start\n      date_end\n    }\n  }\n}\n`;\nexport const deletePhase = `mutation DeletePhase($input: DeletePhaseInput!) {\n  deletePhase(input: $input) {\n    id\n    logs {\n      items {\n        id\n        timestamp\n        text\n      }\n      nextToken\n    }\n    duration\n    title\n    description\n    process {\n      id\n      phaseids {\n        nextToken\n      }\n      user_id\n      user {\n        id\n        username\n        first_name\n        last_name\n        email\n        password_hash\n        phone_number\n      }\n      name\n      date_start\n      date_end\n    }\n  }\n}\n`;\nexport const createLog = `mutation CreateLog($input: CreateLogInput!) {\n  createLog(input: $input) {\n    id\n    timestamp\n    text\n    phase {\n      id\n      logs {\n        nextToken\n      }\n      duration\n      title\n      description\n      process {\n        id\n        user_id\n        name\n        date_start\n        date_end\n      }\n    }\n  }\n}\n`;\nexport const updateLog = `mutation UpdateLog($input: UpdateLogInput!) {\n  updateLog(input: $input) {\n    id\n    timestamp\n    text\n    phase {\n      id\n      logs {\n        nextToken\n      }\n      duration\n      title\n      description\n      process {\n        id\n        user_id\n        name\n        date_start\n        date_end\n      }\n    }\n  }\n}\n`;\nexport const deleteLog = `mutation DeleteLog($input: DeleteLogInput!) {\n  deleteLog(input: $input) {\n    id\n    timestamp\n    text\n    phase {\n      id\n      logs {\n        nextToken\n      }\n      duration\n      title\n      description\n      process {\n        id\n        user_id\n        name\n        date_start\n        date_end\n      }\n    }\n  }\n}\n`;\n","import Amplify, {API,graphqlOperation} from 'aws-amplify';\nimport * as queries from '../graphql/queries';\nimport * as mutations from '../graphql/mutations';\nimport aws_config from '../aws-exports';\n\nAmplify.configure(aws_config);\n\nexport async function getUser(id){\n    const user=  await API.graphql(graphqlOperation(queries.getUser,{id}));\n    return user;\n}\n\nexport async function getUserbyUsername(username){\n    const filter = { username : { eq : username } }\n    const user = await API.graphql(graphqlOperation(queries.listUsers,{filter}));\n    const userinfo = await getUser(user.data.listUsers.items[0].id);\n    return userinfo;\n}\n\nexport async function getLogs(log_id){\n    const Log= await API.graphql(graphqlOperation(queries.getLog,{id:log_id}));\n    return Log;\n}\n\nexport async function getProcess(process_id){\n    const Process = await API.graphql(graphqlOperation(queries.getProcess,{id:process_id}));\n    return Process;\n}\nexport async function getPhase(phase_id){\n    const Phase = await API.graphql(graphqlOperation(queries.getPhase,{id:phase_id}));\n    return Phase;\n}\nexport async function createUser(username,first_name,last_name,email,phone,password_hash){\n    const userinfo ={\n        username:username,\n        first_name:first_name,\n        last_name:last_name,\n        email:email,\n        password_hash:password_hash,\n        phone_number:phone,\n    }\n    const newUser = await API.graphql(graphqlOperation(mutations.createUser,{input:userinfo}));\n    return newUser;\n}\nexport async function createLogs(PhaseId,timestamp,text){\n    const loginfo={\n        timestamp,\n        text,\n        logPhaseId:PhaseId,\n    }\n    const newLog = await API.graphql(graphqlOperation(mutations.createLog,{input:loginfo}));\n    return newLog;\n}\nasync function createProcess(id,name,date_start,date_end){\n    const processInfo={\n        user_id:id,\n        name:name,\n        date_start,\n        date_end,\n        processUserId:id\n    }\n    const newProcess = await API.graphql(graphqlOperation(mutations.createProcess,{input:processInfo}));\n    return newProcess;\n}\nasync function createPhase(processId,title,description){\n    const phaseInfo={\n        title:title,\n        description:description,\n        duration:\"0000000\",\n        phaseProcessId: processId\n    }\n    const newPhase = await API.graphql(graphqlOperation(mutations.createPhase,{input:phaseInfo}));\n    return newPhase;\n}\nexport async function updateUser(user_info){ //When Updating Users Info you need to make sure the attributes are correct. List: id,username,first_name,last_name,email,phone_number,password_hash\n    const updatedUser= await API.graphql(graphqlOperation(mutations.updateUser,{input:user_info}));\n    return updatedUser;\n}\nexport async function updateLogs(id,timestamp,text){\n    if(text === \"\"){\n        return null;\n    }\n    const loginfo={\n        id:id,\n        timestamp,\n        text\n    }\n    const updatedLog = await API.graphql(graphqlOperation(mutations.updateLog,{input:loginfo}));\n    return updatedLog;\n}\nexport async function updateProcess(id,name,timestamp){\n    const processInfo={\n        id:id,\n        name:name,\n        timestamp:timestamp\n    }\n    const updatedProcess = await API.graphql(graphqlOperation(mutations.updateProcess,{input:processInfo}));\n    return updatedProcess;\n}\nexport async function updatePhase(id,duration,title,description){\n    const phaseInfo={\n        id:id,\n        duration,\n        title,\n        description\n    }\n    const updatedPhase = await API.graphql(graphqlOperation(mutations.updatePhase,{input:phaseInfo}));\n    return updatedPhase;\n}\nexport async function deleteUser(id){\n    const userinfo ={\n        id:id\n    }\n    const deletedUser= await API.graphql(graphqlOperation(mutations.deleteUser,{input:userinfo}));\n    return deletedUser;\n}\nexport async function deleteProcess(id){\n    const processInfo={\n        id:id\n    }\n    const deletedProcess = await API.graphql(graphqlOperation(mutations.deleteProcess,{input:processInfo}));\n    return deletedProcess;\n}\n\nexport async function deleteLogs(id){\n    const loginfo={\n        id:id\n    }\n    const deletedLog = await API.graphql(graphqlOperation(mutations.deleteLog,{input:loginfo}));\n    return deletedLog;\n}\nexport async function deletePhase(id){\n    const phaseInfo ={\n        id:id\n    }\n    const deletedPhase = await API.graphql(graphqlOperation(mutations.deletePhase,{input:phaseInfo}));\n    return deletedPhase;\n}\nexport async function createNewCompass(user,name,phases){\n    let process_info;\n    await createProcess(user.id,name,\"0000000\",\"00000000\").then(\n        (res)=>{\n            process_info=res.data.createProcess;\n        },(error)=>{\n            console.log(error);\n        }\n    )\n\n    for(let i =0 ;i < phases.length; i++){ await createPhase(process_info.id,phases[i].title,phases[i].description);}\n    return getProcess(process_info.id);\n}\nexport async function appendNewLog(phaseId,log){\n    if(log.text === \"\"){\n        alert(\"Empty log text\");\n    }else{\n        createLogs(log.timestamp,log.text).then(\n            (logres)=>{\n                getPhase(phaseId).then(\n                    (res)=>{\n                        // let phase_info= res.data.getPhase;\n                        console.log(res);\n                        console.log(logres);\n                        //updatePhase(phase_info.id,phase_info.logs.push(logres.data.createLog),phase_info.duration,phase_info.title,phase_info.description);\n                    }\n                )\n            }\n        )\n    }\n}\n\nexport async function listCompasses(){\n    const processes = await API.graphql(graphqlOperation(queries.listProcesss,{limit : 100}));\n    return processes;\n}\n","// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-east-1\",\n    \"aws_appsync_graphqlEndpoint\": \"https://tlpgdp57nbdkxd56oozfo5ilve.appsync-api.us-east-1.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"us-east-1\",\n    \"aws_appsync_authenticationType\": \"API_KEY\",\n    \"aws_appsync_apiKey\": \"da2-cef5ti5kdzduhd5hpfmirz5k44\",\n    \"aws_cognito_identity_pool_id\": \"us-east-1:081859b3-b4f7-4f0b-832c-2d199686e884\",\n    \"aws_cognito_region\": \"us-east-1\",\n    \"aws_user_pools_id\": \"us-east-1_YTLNM43zQ\",\n    \"aws_user_pools_web_client_id\": \"6jjcu7qj7co9fjhu89cogi7tad\",\n    \"oauth\": {},\n    \"aws_content_delivery_bucket\": \"niesignompasspp-20190501181012-hostingbucket-dev\",\n    \"aws_content_delivery_bucket_region\": \"us-east-1\",\n    \"aws_content_delivery_url\": \"https://dwgjvy2m8ou08.cloudfront.net\"\n};\n\n\nexport default awsmobile;\n","import React, { Component } from \"react\";\nimport Vega from 'react-vega';\nimport sizeMe from 'react-sizeme'\nimport { Handler } from 'vega-tooltip';\n\nclass BarChart extends Component {      \n    render() {\n      const spec = this.props.spec\n        ? this.props.spec\n        : this.defaultSpec;\n      spec.width = this.props.width\n        ? this.props.width\n        : this.defaultSpec.width;\n      spec.height = this.props.height\n        ? this. props.height\n        : this.defaultSize.height\n      return <Vega spec={spec} width={spec.width} height={spec.height} data={this.props.data} />\n    }\n\n    defaultSize = {\n        width: 100,\n        height: 100\n    }\n\n    defaultSpec = {\n        \"$schema\": \"https://vega.github.io/schema/vega/v5.json\",\n        \n        \"padding\": \"10\",\n        \"width\": this.defaultSize.width,\n        \"height\": this.defaultSize.height,\n        \"autosize\": {\n            \"type\": \"fit\",\n            \"contains\": \"padding\",\n            \"resize\": false\n        },\n      \n        \"data\": [{ \"name\": \"table\" }],\n      \n        \"signals\": [\n          {\n            \"name\": \"tooltip\",\n            \"value\": {},\n            \"on\": [\n              {\"events\": \"rect:mouseover\", \"update\": \"datum\"},\n              {\"events\": \"rect:mouseout\",  \"update\": \"{}\"}\n            ]\n          },\n        ],\n      \n        \"scales\": [\n          {\n            \"name\": \"xscale\",\n            \"type\": \"band\",\n            \"domain\": {\"data\": \"table\", \"field\": \"category\"},\n            \"range\": \"width\",\n            \"padding\": 0.05,\n            \"round\": true\n          },\n          {\n            \"name\": \"yscale\",\n            \"domain\": {\"data\": \"table\", \"field\": \"amount\"},\n            \"nice\": true,\n            \"range\": \"height\"\n          }\n        ],\n      \n        \"axes\": [\n          { \n            \"orient\": \"bottom\",\n            \"scale\": \"xscale\",\n            \"title\": \"Phase\",\n            \"titleFontSize\": 18\n          },\n          { \n            \"orient\": \"left\",\n            \"scale\": \"yscale\",\n            \"title\": \"Duration (hours)\",\n            \"titleFontSize\": 18\n         }\n        ],\n\n        \"encoding\": {\n          \"x\": {\"field\": \"a\", \"type\": \"ordinal\"},\n          \"y\": {\"field\": \"b\", \"type\": \"quantitative\"}\n        },\n      \n        \"marks\": [\n          {\n            \"type\": \"rect\",\n            \"from\": {\"data\":\"table\"},\n            \"encode\": {\n              \"enter\": {\n                \"x\": {\"scale\": \"xscale\", \"field\": \"category\"},\n                \"width\": {\"scale\": \"xscale\", \"band\": 1},\n                \"y\": {\"scale\": \"yscale\", \"field\": \"amount\"},\n                \"y2\": {\"scale\": \"yscale\", \"value\": 0}\n              },\n              \"update\": {\n                \"fill\": {\"value\": \"steelblue\"}\n              },\n              \"hover\": {\n                \"fill\": {\"value\": \"#dc3545\"}\n              }\n            }\n          },\n          {\n            \"type\": \"text\",\n            \"encode\": {\n              \"enter\": {\n                \"align\": {\"value\": \"center\"},\n                \"baseline\": {\"value\": \"bottom\"},\n                \"fill\": {\"value\": \"#333\"}\n              },\n              \"update\": {\n                \"x\": {\"scale\": \"xscale\", \"signal\": \"tooltip.category\", \"band\": 0.5},\n                \"y\": {\"scale\": \"yscale\", \"signal\": \"tooltip.amount\", \"offset\": -2},\n                \"text\": {\"signal\": \"tooltip.amount\"},\n                // \"fillOpacity\": [\n                //   {\"test\": \"datum === tooltip\", \"value\": 0},\n                //   {\"value\": 1}\n                // ]\n              }\n            }\n          }\n        ]\n    }\n}\n\nexport default sizeMe()(BarChart);","import React, { Component } from \"react\";\nimport BarChart from \"./BarChart\";\nimport { SizeMe } from 'react-sizeme'\n\nclass ResponsiveBarChart extends Component {\n    render() { return (\n        <SizeMe render={({ size }) => \n            <div>\n                <BarChart width={size.width} height={size.width*2/3} data={this.props.data}/>\n            </div>\n        }/>\n    )}\n}\n\nexport default ResponsiveBarChart;","import React, { Component } from \"react\";\nimport PropTypes from 'prop-types';\n\n/**\n * Componenet for displaying the information inside a Log, and controls for updating\n * or deleting a Log\n */\nclass LogCard extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            deleteHandler: this.props.deleteHandler,\n            updateHandler: this.props.updateHandler,\n            editText: null,\n            editing: false\n        }\n    }\n\n    /**\n     * Handler for toggling the editing state, which will \n     * display a textarea to enter changes to a Log.\n     */\n    edit_toggle_handler = () => {\n        this.setState({editing: !this.state.editing});\n    }\n\n    /**\n     * Handler to send Log changes, with the current timestamp\n     */\n    update_button_handler = () => {\n        this.props.updateHandler(this.props.logId, Date.now(), this.state.editText);\n        this.setState({editing: false});\n    }\n\n    /**\n     * Handler to delete a Log.\n     */\n    delete_button_handler = () => {\n        this.props.deleteHandler(this.props.logId);\n    }\n\n    /**\n     * Handler to update the textarea changes to state\n     */\n    textarea_handler = (e) => {\n        this.setState({editText: e.target.value});\n    }\n        \n    render() {\n        return (\n            <div className={'card mb-3 shadow-sm'}>\n                <div className={'card-header'}>\n                    <div className={'row'}>\n                        <div className={'col-lg-8 col-sm-12'}>\n                            <span className={'row'}>\n                                <span className={'col-lg-6 col-4'}>\n                                    {this.props.phaseTitle}\n                                </span>\n                                <span className={'col-lg-6 col-8 text-lg-center text-right'}>\n                                    {this.props.timestamp\n                                        ? new Date(parseInt(this.props.timestamp)).toLocaleString()\n                                        : null\n                                    }\n                                </span>\n                            </span>\n                        </div>\n                        <div className={'col-lg-4 col-sm-12 justify-content-end'}>\n                            {this.state.editing\n                                ?   <span className={'d-flex row justify-content-end'}>\n                                        <button \n                                            id={'cancel'}\n                                            className={'btn btn-outline-primary col-lg-3'}\n                                            onClick={this.edit_toggle_handler}\n                                        >Cancel\n                                        </button>\n                                        <span className={'m-1'} />\n                                        <button \n                                            id={'update'}\n                                            className={'btn btn-outline-success col-lg-3'}\n                                            onClick={this.update_button_handler}\n                                        >Update\n                                        </button>\n                                    </span>\n                                :   <span className={'d-flex row row justify-content-end'}>\n                                        <button \n                                            id={'edit'}\n                                            className={'btn btn-outline-secondary col-lg-3'}\n                                            onClick={this.edit_toggle_handler}\n                                        >Edit\n                                        </button>\n                                        <span className={'m-1'} />\n                                        <button\n                                            id={'delete'}\n                                            className={'btn btn-outline-danger col-lg-3'}\n                                            onClick={this.delete_button_handler}\n                                        >Delete\n                                        </button>\n                                    </span>\n                            }\n                        </div>\n                    </div>\n                </div>\n                <div className={'card-body'}>\n                    {/* <h5 class=\"card-title\">Special title treatment</h5> */}\n                    <div style={{whiteSpace: 'pre-line'}} className={'card-text'}>{this.props.text}</div>\n                    {this.state.editing\n                        ?   <textarea \n                                id={'textarea'}\n                                className={'form-control'} \n                                rows={4} \n                                autoFocus={true}\n                                defaultValue={this.props.text} \n                                onChange={this.textarea_handler}\n                            />\n                        :   null\n                    }\n                </div>\n            </div>\n        )\n    }\n}\n\nLogCard.propTypes = {\n    logId: PropTypes.object.isRequired,\n    phaseTitle: PropTypes.string.isRequired,\n    timestamp: PropTypes.number.isRequired,\n    text: PropTypes.string.isRequired,\n    deleteHandler: PropTypes.func.isRequired,\n    updateHandler: PropTypes.func.isRequired,\n };\n\nexport default LogCard;","import React, { Component } from \"react\";\nimport ResponsiveBarChart from './ResponsiveBarChart';\nimport  {connect} from \"react-redux\"\nimport {authenticateUser} from \"../state/actions\"\nimport * as Utils from '../graphql_utils/utils'\nimport LogCard from \"./LogCard\";\nimport PropTypes from 'prop-types';\n\n\n/**\n * Component that accepts a processId, fetches its data and displays its information\n *  \n */\nclass Graph extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            spec: this.spec,\n            // chartData: this.data,\n        };\n    }\n\n    /**\n     * Loads the data related to the BarChart and data related to the Logs in a Process\n     * \n     * @param {string} process_id The id of the Process\n     */\n    load_process_data(process_id) {\n        this.load_chart_data(process_id);\n        this.load_log_data(process_id);\n    }\n    componentDidMount() {\n        if (this.props.processId) this.load_process_data(this.props.processId)\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.updateComponent) {\n            this.load_process_data(this.props.processId)\n            this.props.updateHandler(\"\")\n        }\n        // console.log('graph update')\n        // if(prevProps !== this.props) {\n        //     console.log('update')\n        //     this.setState(this.props.processId)\n        // }\n    }\n    /**\n     * Converts a number in milliseconds to hours\n     * \n     * @param {number} t The number of milliseconds\n     * @return {number} The milliseconds converted to hours\n     */\n    msToHours(t) {\n       const s = t/1000;\n       const m = s/60;\n       const h = m/60\n       return h;\n    }\n\n    /**\n     * Loads the Phase duration data for the BarChart and saves to state\n     * \n     * @param {string} process_id The id of the Process\n     */\n    load_chart_data(process_id) {\n        this.setState({\n            loading: true\n        });\n        Utils.getProcess(process_id).then(res => {\n            const phases = res.data.getProcess.phaseids.items;\n            const items = phases.map(phase => {\n                return {\n                    category: phase.title,\n                    amount: this.msToHours(phase.duration).toFixed(2)\n                    // amount: phase.duration\n                }\n            })\n            this.setState({\n                loading: false,\n                chartData: {\n                    table: items\n                }\n            })\n        })\n    }\n\n    /**\n     * Loads the Phase Logs data and saves to state\n     * \n     * @param {string} process_id The id of the Process\n     */\n    load_log_data(process_id) {\n        this.setState({\n            loading: true\n        });\n        Utils.getProcess(process_id).then(res => {\n            const phase_ids = res.data.getProcess.phaseids.items.map(phase => {\n                return phase.id\n            });\n            Promise.all(phase_ids.map(phase_id => {\n                return Utils.getPhase(phase_id).then(res => { \n                    const phase = res.data.getPhase;\n                    const logs = phase.logs.items;\n                    logs.sort((a, b) => {\n                        return a.timestamp - b.timestamp;\n                    })\n                    return {\n                        phase_id: phase.id,\n                        title: phase.title,\n                        log_ids: logs\n                    };\n                });\n            })).then(phase_logs => {\n                this.setState({\n                    loading: false,\n                    selected_process_phase_logs: phase_logs\n                });         \n            });\n        })\n    }\n    /**\n     * Sends a request to delete a Log, using Utils.deleteLogs()\n     * Reloads all Logs again\n     * \n     * @param {string} log_id The id of the Log\n     */\n    deleteLogHandler = (log_id) => {\n        this.setState({\n            loading: true\n        });\n        Utils.deleteLogs(log_id).then(res => {\n            this.setState({\n                loading: false\n            });\n            this.load_log_data(this.props.processId)\n        })\n    }\n\n    /**\n     * Sends a request to update a Log, using Utils.updateLogs()\n     * Reloads all Logs again.\n     * \n     * @param {string} log_id The id of the Log\n     */\n    updateLogHandler = (log_id, timestamp, text) => {\n        this.setState({\n            loading: true\n        })\n        // don't send empty strings\n        text = text ? text : '(blank entry)';\n        Utils.updateLogs(log_id, timestamp, text).then(res => {\n            this.setState({loading: false})\n            this.load_log_data(this.props.processId)\n        })\n    }\n\n    /**\n     * Renders a LogCard for each of the Logs loaded into state\n     */\n    process_logs_render = () => {\n        // combine all logs from all phases\n        const data = this.state.selected_process_phase_logs\n            ?   this.state.selected_process_phase_logs.reduce((arr, phase) => {\n                    // console.log(phase)\n                    const logs = phase.log_ids.map(log => {\n                        return {\n                            phase_title: phase.title,\n                            id: log.id,\n                            timestamp: log.timestamp,\n                            text: log.text\n                        }\n                    })  \n                    arr.push(...logs);\n                    return arr;\n                }, []).sort((a, b) => {\n                    return a.timestamp - b.timestamp;\n                })\n            :   null;\n        return data\n            ?   <div className={''}>\n                    {data.map(log => {\n                        return( \n                            <LogCard \n                                key={log.id} \n                                logId={log.id}\n                                phaseTitle={log.phase_title}\n                                timestamp={log.timestamp}\n                                text={log.text}\n                                deleteHandler={this.deleteLogHandler} \n                                updateHandler={this.updateLogHandler}\n                            />\n                        )\n                    })}\n                </div>\n            :   null;\n    }\n\n    /**\n     * Renders the ResponsiveBarChart for the loaded chart data in state\n     */\n    bar_chart_render = () => {\n        return this.state.chartData\n            ? <ResponsiveBarChart data={this.state.chartData} />\n            : null;\n    }\n    /**\n     * Displays a spinner in the middle of the screen, while the loading key in state is true\n     */\n    loading_render = () => {\n        const style = {\n            position: 'fixed',\n            zIndex: '1020',\n            top: '50%',\n            left: '50%',\n            width:'5em',\n            height: '5em',\n            marginTop: '-2.5em',\n            marginLeft: '-2.5em'\n        }\n        return (this.state.loading\n            ? <div style={style} className={'spinner-grow text-info'}></div>\n            : null\n        );\n    }\n\n    render() {\n        return (\n            <div className='container'>\n                {this.loading_render()}\n                {this.bar_chart_render()}\n                {this.process_logs_render()}\n            </div>\n        );\n    }\n\n    // data = {\n    //     table : [\n    //         {\"category\": \"A\", \"amount\": 28},\n    //         {\"category\": \"B\", \"amount\": 55},\n    //         {\"category\": \"C\", \"amount\": 43},\n    //         {\"category\": \"D\", \"amount\": 91},\n    //         {\"category\": \"E\", \"amount\": 81},\n    //         {\"category\": \"F\", \"amount\": 53},\n    //         {\"category\": \"G\", \"amount\": 19},\n    //         {\"category\": \"H\", \"amount\": 87},\n    //         {\"category\": \"I\", \"amount\": 23}\n    //     ]\n    // }\n}\n\nGraph.propTypes = {\n    processId: PropTypes.string.isRequired,\n};\n\n// const mapStateToProps = ({state}) => ({\n//     isAuthenticated: state.isAuthenticated,\n//     user: state.user\n// })\n// const mapDispatchToProps = dispatch => ({\n//     authenticateUser: (auth) => dispatch(authenticateUser(auth))\n// })\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Graph);\nexport default Graph;\n"],"sourceRoot":""}